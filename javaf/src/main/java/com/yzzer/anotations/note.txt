2. 注解的应用场景：
示例1：生成文档相关的注解
示例2：在编译时进行格式检查（JDK內置的三个基本注解）
示例3：跟踪代码依赖性，实现替代配置文件功能

3. JavaSE涉及到的3个常用注解
    @Deprecated
    @Override
    @SuppressWarnings 抑制编译器警告

4. 自定义注解
以@SuppressWarnings为参照物，进行定义即可

5. 元注解的理解
元注解：对现有的注解进行解释说明的注解
@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE}) // 注解的修饰区域
@Retention(RetentionPolicy.SOURCE) // 注解需要保留在什么生命周期， SOURCE 表示只保留在代码中，CLASS表示只存在在字节码文件和源代码，RUNTIME表示在运行时有
@Documented // 表示需要被JavaDoc解析
@Inherited // 允许子类继承父类中的注解


框架 = 注解 + 反射 + 设计模式

测试：
1. 黑盒测试/白盒测试(单元测试 )